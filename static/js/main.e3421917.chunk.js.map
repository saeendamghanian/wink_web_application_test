{"version":3,"sources":["Actions/fetchSearchReq.js","Actions/types.js","Actions/showPage.js","Actions/getMaxPageLimit.js","Components/SearchBar.js","Components/SearchResult.js","Components/Pagination.js","Components/Welcome.js","Components/BookDetailPage.js","App.js","serviceWorker.js","Reducers/fetchSearchReducer.js","Reducers/showPageReducer.js","Reducers/pageLimitReducer.js","Reducers/index.js","store.js","index.js"],"names":["fetchSearchReq","input","dispatch","a","axios","get","resultData","type","payload","data","items","showPage","num","maxPageLimit","slice","pageNum","getMaxPageLimit","pageLimit","SearchBar","state","handleInputChange","e","setState","target","value","handleSearch","preventDefault","props","searchResult","handleSelectChange","parseInt","className","this","onChange","placeholder","aria-label","onClick","id","defaultValue","React","Component","connect","SearchResult","pageElements","scope","map","element","index","key","to","volumeInfo","title","authors","publishedDate","numOfPages","i","Math","ceil","length","push","href","Welcome","searches","eachPageElements","eachPageLimit","BookDetailPage","params","match","book","Object","assign","find","description","publisher","language","infoLink","App","path","component","exact","render","Boolean","window","location","hostname","initialState","fetchSearchReducer","action","showPageReducer","pageLimitReducer","rootReducer","combineReducers","store","createStore","compose","applyMiddleware","thunk","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e3421917.chunk.js","sourcesContent":["import axios from \"axios\";\nimport { FETCH_SEARCH } from \"./types\";\n\n// Get data from API based on user input and if it be empty use 'All' as a default value.\nconst fetchSearchReq = input => async dispatch => {\n  input = input === \"\" ? \"all\" : input;\n  const resultData = await axios.get(\n    `https://www.googleapis.com/books/v1/volumes?q=${input}&maxResults=40`\n  );\n  dispatch({\n    type: FETCH_SEARCH,\n    payload: resultData.data.items\n  });\n};\n\nexport default fetchSearchReq;\n","// Types of the actions.\nconst FETCH_SEARCH = \"FETCH_SEARCH\";\nconst PAGE_ELEMENTS = \"PAGE_ELEMENTS\";\nconst PAGE_LIMIT = \"PAGE_LIMIT\";\n\nexport { FETCH_SEARCH, PAGE_ELEMENTS, PAGE_LIMIT };\n","import { PAGE_ELEMENTS } from \"./types\";\n\n// Create an array of book which should be deslpayed.\nconst showPage = (num, data, maxPageLimit) => dispatch => {\n  const tableBodyResult = data.slice(\n    maxPageLimit * num - maxPageLimit,\n    maxPageLimit * num\n  );\n\n  dispatch({\n    type: PAGE_ELEMENTS,\n    payload: tableBodyResult,\n    pageNum: num\n  });\n};\n\nexport default showPage;\n","import { PAGE_LIMIT } from \"./types\";\n\n// Action creator for page limit which got from user input.\nconst getMaxPageLimit = pageLimit => dispatch => {\n  dispatch({\n    type: PAGE_LIMIT,\n    payload: pageLimit\n  });\n};\n\nexport default getMaxPageLimit;\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport fetchSearchReq from \"../Actions/fetchSearchReq\";\nimport showPage from \"../Actions/showPage\";\nimport getMaxPageLimit from \"../Actions/getMaxPageLimit\";\n\nclass SearchBar extends React.Component {\n  state = {\n    input: \"\"\n  };\n\n  handleInputChange = e => {\n    this.setState({\n      input: e.target.value\n    });\n  };\n\n  handleSearch = async e => {\n    e.preventDefault();\n    // Fetch data from API through calling action creator.\n    await this.props.fetchSearchReq(this.state.input);\n    // Prepare the page elements based on fetched data.\n    this.props.showPage(1, this.props.searchResult, this.props.maxPageLimit);\n    this.setState({ input: \"\" });\n  };\n\n  handleSelectChange = async e => {\n    e.preventDefault();\n    // Get the input of page limit from the user through action creator.\n    await this.props.getMaxPageLimit(parseInt(e.target.value));\n    // Prepare the page elements based on new page limit from the user input.\n    this.props.showPage(1, this.props.searchResult, this.props.maxPageLimit);\n  };\n\n  render() {\n    return (\n      // Nav bar elements\n      <div className=\"container\">\n        <nav className=\"navbar navbar-expand-lg navbar-light bg-dark  justify-content-between\">\n          <form className=\"form-inline\">\n            <input\n              className=\"form-control mr-sm-2\"\n              type=\"search\"\n              value={this.state.input}\n              onChange={this.handleInputChange}\n              placeholder=\"Search\"\n              aria-label=\"Search\"\n            />\n            <button\n              className=\"btn btn-outline-success my-2 my-sm-0\"\n              type=\"submit\"\n              onClick={this.handleSearch}\n            >\n              Search\n            </button>\n          </form>\n          <div>\n            <span className=\"navbar-text text-white mr-2\">Item per page</span>\n            <select\n              id=\"maxPageLimit\"\n              className=\"custom-select\"\n              onChange={this.handleSelectChange}\n            >\n              <option value=\"5\" defaultValue>\n                5\n              </option>\n              <option value=\"10\">10</option>\n              <option value=\"15\">15</option>\n              <option value=\"20\">20</option>\n            </select>\n          </div>\n        </nav>\n      </div>\n    );\n  }\n}\n\nexport default connect(null, { fetchSearchReq, showPage, getMaxPageLimit })(\n  SearchBar\n);\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nconst SearchResult = ({ maxPageLimit, pageElements, pageNum }) => {\n  return (\n    // Create table of search result elements.\n    <div className=\"container\">\n      <div className=\"table-responsive\">\n        <table className=\"table table-hover\">\n          <thead>\n            <tr>\n              <th scope=\"col\">#</th>\n              <th scope=\"col\">Title</th>\n              <th scope=\"col\">Authors</th>\n              <th scope=\"col\">Published Date</th>\n            </tr>\n          </thead>\n          <tbody>\n            {pageElements.map((element, index) => {\n              return (\n                <tr key={index}>\n                  <th scope=\"row\">\n                    {(pageNum - 1) * maxPageLimit + (index + 1)}\n                  </th>\n                  <td>\n                    <Link to={`/wink_web_application_test/book/${element.id}`}>\n                      {element.volumeInfo.title}\n                    </Link>\n                  </td>\n                  <td>{element.volumeInfo.authors}</td>\n                  <td>{element.volumeInfo.publishedDate}</td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n};\n\nexport default SearchResult;\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport showPage from \"../Actions/showPage\";\n\nconst Pagination = ({ searchResult, maxPageLimit, showPage }) => {\n  let numOfPages = [];\n\n  // Find number of paginators.\n  for (let i = 1; i <= Math.ceil(searchResult.length / maxPageLimit); i++) {\n    numOfPages.push(i);\n  }\n  return (\n    <nav>\n      <ul className=\"pagination justify-content-center\">\n        {// Create paginators based on the amount of them.\n        numOfPages.map((element, index) => (\n          <li key={index} className=\"page-item\">\n            <a\n              className=\"page-link\"\n              href=\"#\"\n              onClick={() => showPage(index + 1, searchResult, maxPageLimit)}\n            >\n              {index + 1}\n            </a>\n          </li>\n        ))}\n      </ul>\n    </nav>\n  );\n};\n\nexport default connect(null, { showPage })(Pagination);\n","import React from \"react\";\nimport SearchBar from \"./SearchBar\";\nimport SearchResult from \"./SearchResult\";\nimport Pagination from \"./Pagination\";\nimport { connect } from \"react-redux\";\n\nclass Welcome extends React.Component {\n  render() {\n    return (\n      <div>\n        <SearchBar\n          searchResult={this.props.searches}\n          maxPageLimit={this.props.pageLimit}\n        />\n        <Pagination\n          searchResult={this.props.searches}\n          maxPageLimit={this.props.pageLimit}\n        />\n        <SearchResult\n          pageElements={this.props.pageElements}\n          maxPageLimit={this.props.pageLimit}\n          pageNum={this.props.pageNum}\n        />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  searches: state.searches.searchResult,\n  pageElements: state.pageElements.eachPageElements,\n  pageLimit: state.pageLimit.eachPageLimit,\n  pageNum: state.pageElements.pageNum\n});\n\nexport default connect(mapStateToProps, null)(Welcome);\n","import React from \"react\";\n\nclass BookDetailPage extends React.Component {\n  render() {\n    // Get book id from URL.\n    const { params } = this.props.match;\n\n    // Create book element object based on book id from URL.\n    const book = Object.assign(\n      {},\n      this.props.searchResult.find(book => book.id === params.id)\n    );\n\n    // Create volume info object.\n    const volumeInfo = Object.assign({}, book.volumeInfo);\n\n    return (\n      // Create list of book infos.\n      <ul id=\"book-info-container\" className=\"list-group list-group-flush\">\n        <li className=\"list-group-item\">{`Title: ${volumeInfo.title}`}</li>\n        <li className=\"list-group-item\">{`Description: ${volumeInfo.description}`}</li>\n        <li className=\"list-group-item\">{`Publisher: ${volumeInfo.publisher}`}</li>\n        <li className=\"list-group-item\">{`PublishedDate: ${volumeInfo.publishedDate}`}</li>\n        <li className=\"list-group-item\">{`Language: ${volumeInfo.language}`}</li>\n        <li className=\"list-group-item\">\n          {`InfoLink: `}\n          <a\n            href={volumeInfo.infoLink}\n            target=\"_blank\"\n          >{`${volumeInfo.infoLink}`}</a>\n        </li>\n      </ul>\n    );\n  }\n}\n\nexport default BookDetailPage;\n","import React from \"react\";\nimport \"./App.css\";\nimport Welcome from \"./Components/Welcome\";\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\nimport BookDetailPage from \"./Components/BookDetailPage\";\nimport { connect } from \"react-redux\";\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <BrowserRouter>\n          <Switch>\n            <Route\n              path=\"/wink_web_application_test/\"\n              component={Welcome}\n              exact\n            />\n            <Route\n              path=\"/wink_web_application_test/book/:id\"\n              render={props => (\n                <BookDetailPage {...props} searchResult={this.props.searches} />\n              )}\n            />\n          </Switch>\n        </BrowserRouter>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  searches: state.searches.searchResult\n});\n\nexport default connect(mapStateToProps, null)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { FETCH_SEARCH } from \"../Actions/types\";\n\nconst initialState = {\n  searchResult: []\n};\n\nconst fetchSearchReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case FETCH_SEARCH:\n      return { ...state, searchResult: action.payload };\n    default:\n      return state;\n  }\n};\n\nexport default fetchSearchReducer;\n","import { PAGE_ELEMENTS } from \"../Actions/types\";\n\nconst initialState = {\n  eachPageElements: [],\n  pageNum: 0\n};\n\n// Show page reducer which modifies the states for the elements that should displayed on page and\n// the page number of page which is already on it.\nconst showPageReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case PAGE_ELEMENTS:\n      return {\n        ...state,\n        eachPageElements: action.payload,\n        pageNum: action.pageNum\n      };\n    default:\n      return state;\n  }\n};\n\nexport default showPageReducer;\n","import { PAGE_LIMIT } from \"../Actions/types\";\n\nconst initialState = {\n  eachPageLimit: 5\n};\n\nconst pageLimitReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case PAGE_LIMIT:\n      return { ...state, eachPageLimit: action.payload };\n    default:\n      return state;\n  }\n};\n\nexport default pageLimitReducer;\n","import { combineReducers } from \"redux\";\nimport fetchSearchReducer from \"./fetchSearchReducer\";\nimport showPageReducer from \"./showPageReducer\";\nimport pageLimitReducer from \"./pageLimitReducer\";\n\nconst rootReducer = combineReducers({\n  searches: fetchSearchReducer,\n  pageElements: showPageReducer,\n  pageLimit: pageLimitReducer\n});\n\nexport default rootReducer;\n","import { createStore, applyMiddleware, compose } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport rootReducer from \"./Reducers\";\n\nexport const store = createStore(\n  rootReducer,\n  {},\n  compose(\n    applyMiddleware(thunk),\n    // To connect Redux DevTools to project.\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n  )\n);\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"./custom.css\";\nimport { Provider } from \"react-redux\";\nimport { store } from \"./store\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}